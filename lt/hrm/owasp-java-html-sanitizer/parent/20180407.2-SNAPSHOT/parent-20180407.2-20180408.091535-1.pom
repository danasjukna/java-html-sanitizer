<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>lt.hrm.owasp-java-html-sanitizer</groupId>
  <artifactId>parent</artifactId>
  <version>20180407.2-SNAPSHOT</version>

  <packaging>pom</packaging>

  <name>OWASP Java HTML Sanitizer Project Parent</name>
  <description>
A fast and easy to configure HTML Sanitizer written in Java which
lets you include HTML authored by third-parties in your web
application while protecting against XSS.
  </description>
  <url>https://github.com/danasjukna/java-html-sanitizer</url>
  <licenses>
    <license>
      <name>Apache License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <scm>
    <connection>scm:git:git://github.com/danasjukna/java-html-sanitizer.git</connection>
    <developerConnection>scm:git:git://github.com/danasjukna/java-html-sanitizer.git</developerConnection>
    <url>https://github.com/danasjukna/java-html-sanitizer</url>
  </scm>

<distributionManagement>
    <repository>
    	<uniqueVersion>false</uniqueVersion>
        <id>internal.repo</id>
        <name>Temporary Staging Repository</name>
        <url>file://${user.dir}/target/mvn-repo</url>
    </repository>
</distributionManagement>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <github.global.server>github</github.global.server>
  </properties>

  <build>
      <plugins>
      
	    <plugin>
	        <artifactId>maven-deploy-plugin</artifactId>
	        <version>2.8.2</version>
	        <configuration>
	            <!-- <altDeploymentRepository>internal.repo::default::file://${project.build.directory}/mvn-repo</altDeploymentRepository> -->
                    <altDeploymentRepository>internal.repo::default::file://${user.dir}/target/mvn-repo</altDeploymentRepository>
	        </configuration>
	    </plugin>
      
      <plugin>
            <groupId>com.github.github</groupId>
            <artifactId>site-maven-plugin</artifactId>
            <version>0.12</version>
            <configuration>
                <message>Maven artifacts for ${project.version}</message>  <!-- git commit message -->
                <noJekyll>true</noJekyll>                                  <!-- disable webpage processing -->
                <!-- <outputDirectory>${project.build.directory}/mvn-repo</outputDirectory>  matches distribution management repository url above -->
		<outputDirectory>${user.dir}/target/mvn-repo</outputDirectory>
                <branch>refs/heads/mvn-repo</branch>                       <!-- remote branch name -->
                <includes><include>**/*</include></includes>
                <repositoryName>java-html-sanitizer</repositoryName>      <!-- github repo name -->
                <repositoryOwner>danasjukna</repositoryOwner>    <!-- github username  -->
            </configuration>
            <executions>
              <!-- run site-maven-plugin's 'site' target as part of the build's normal 'deploy' phase -->
              <execution>
                <goals>
                  <goal>site</goal>
                </goals>
                <phase>deploy</phase>
              </execution>
            </executions>
        </plugin>
      
 
        <!-- For building the source jar. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>2.2.1</version>
          <executions>
            <execution>
              <id>attach-sources</id>
              <goals>
                <goal>jar</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        
        <!-- For building the javadoc jar. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>2.10.4</version>
          <executions>
            <execution>
              <id>attach-javadocs</id>
              <goals>
                <goal>jar</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <nohelp>true</nohelp>
            <show>public</show>
            <charset>UTF-8</charset>
            <doctitle>OWASP HTML Sanitizer</doctitle>
            <excludePackageNames>*.example</excludePackageNames>
            <!-- The Javadoc that ships with JDK 8 is spammy.
                 http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#BEJEFABE -->
            <additionalparam>-Xdoclint:-missing</additionalparam>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.3</version>
          <configuration>
            <source>6</source>
            <target>6</target>
          </configuration>
        </plugin>

      </plugins>

  </build>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>com.google.guava</groupId>
        <artifactId>guava</artifactId>
        <version>19.0</version>
      </dependency>
      <dependency>
        <groupId>commons-codec</groupId>
        <artifactId>commons-codec</artifactId>
        <version>[1.4,)</version>
      </dependency>
      <dependency>
        <groupId>com.google.code.findbugs</groupId>
        <artifactId>jsr305</artifactId>
        <version>[2.0.1,)</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>com.google.code.findbugs</groupId>
        <artifactId>annotations</artifactId>
        <version>[2.0.1,)</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.12</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <profiles>
    <profile>
      <id>release-sign-artifact</id>
      <activation>
        <property>
          <name>performRelease</name>
          <value>true</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>1.5</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

        <profile>
            <id>all</id>
            <modules>
                <module>../../java-html-sanitizer</module>
            </modules>
            <activation>
               <activeByDefault>true</activeByDefault>
            </activation>
        </profile>

  </profiles>
</project>
